{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAGCC,iB;AAET,6CAAa;AAAA;;AAET,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAE7B,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEA;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;;AAEGE,wCAAQL,UAAR;AAEH,6BAfD;;AAiBAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAMH,yBA/BM,CAAP;AAiCH;;;kDAEoBtB,U,EAAY;AAC7BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACA1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEA1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAc,IAAf,EAApC;AACH,yBALD;AAOH;;;sDAEuB;;AAExB,4BAAI7B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AAEA","file":"ConnectionFactory.js","sourcesContent":["/**\r\n * declaracao de variaveis locais\r\n * Qdo utilizado const no ES6 não permite reatribuir valor\r\n */\r\nconst stores = ['negociacoes'];\r\nconst version = 6;\r\nconst dbName = 'aluraframe'\r\n\r\nvar connection = null;\r\nvar close = null;\r\n\r\n//transforma classe em modulo\r\nexport class ConnectionFactory {\r\n\r\n    constructor(){\r\n\r\n        throw new Error('Não é possivel criar instancias de ConnectionFactory');\r\n    }     \r\n\r\n    static getConnection(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result);\r\n            }\r\n            \r\n            openRequest.onsuccess = e => {\r\n\r\n            if (!connection) {\r\n                connection = e.target.result;\r\n\r\n                close = connection.close.bind(connection);\r\n\r\n                //monkey patch\r\n                connection.close = function(){\r\n                    throw new Error('Você não pode fechar diretamente a conexão');\r\n                }\r\n            } \r\n                    \r\n                resolve(connection);\r\n                \r\n            }\r\n            \r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                \r\n                reject(e.target.error.name);\r\n            }\r\n            \r\n        });\r\n        \r\n    }\r\n    \r\n    static _createStores(connection) {\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n            connection.deleteObjectStore(store);\r\n            \r\n            connection.createObjectStore(store, {autoIncrement:true});                    \r\n        });\r\n\r\n    }\r\n\r\n    static closeConnection(){\r\n\r\n    if (connection) {\r\n        close();\r\n        connection = null;\r\n    }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]}